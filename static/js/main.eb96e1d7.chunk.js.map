{"version":3,"sources":["components/Header.js","components/Note.js","components/NotesList.js","App.js","index.js"],"names":["Header","props","React","createElement","console","log","className","onClick","addNote","type","placeholder","value","searchText","onChange","e","onSearch","target","Note","note","title","updatedValue","editMeId","id","onType","description","removeNote","NotesList","searchMatches","notes","filter","doesMatchSearch","noteElements","map","key","App","_Component","_getPrototypeOf2","_this","_classCallCheck","this","_len","arguments","length","args","Array","_key","_possibleConstructorReturn","_getPrototypeOf","call","apply","concat","state","Date","now","newNote","setState","_toConsumableArray","updatedField","updatedNotes","text","newSearchText","toLowerCase","titleMatch","includes","descriptionMatch","hasMatch","noteId","_inherits","_createClass","stringifiedNotes","JSON","stringify","localStorage","setItem","getItem","savedNotes","parse","Component","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.eb96e1d7.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = (props) => {\n  const callSearch = (e) => {\n    props.onSearch(e.target.value);\n  };\n\n  return (\n    <header>\n      {console.log(props)}\n      <h1 className=\"app-header__title\">Super Sticky Notes</h1>\n      <aside className=\"app-header__controls\">\n        <button className=\"add-new\" onClick={props.addNote}>\n          + New Note\n        </button>\n        <input\n          className=\"search\"\n          type=\"text\"\n          placeholder=\"Type here to search...\"\n          value={props.searchText}\n          onChange={callSearch}\n        />\n      </aside>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst Note = (props) => {\n  console.log(props);\n  const updateTitle = (e) => {\n    const updatedValue = e.target.value;\n    const editMeId = props.note.id;\n    props.onType(editMeId, \"title\", updatedValue);\n  };\n\n  const updateDescription = (e) => {\n    const updatedValue = e.target.value;\n    const editMeId = props.note.id;\n    props.onType(editMeId, \"description\", updatedValue);\n  };\n\n  const clickDelete = () => {\n    props.removeNote(props.note.id);\n  };\n\n  return (\n    <li className=\"note\">\n      {console.log(props.note)}\n      <input\n        type=\"text\"\n        placeholder=\"Title\"\n        className=\"note__title\"\n        value={props.note.title}\n        onChange={updateTitle}\n      />\n      <textarea\n        placeholder=\"Description...\"\n        className=\"note__description\"\n        value={props.note.description}\n        onChange={updateDescription}\n      />\n      <span onClick={clickDelete} className=\"note__delete\">\n        X\n      </span>\n    </li>\n  );\n};\n\nexport default Note;\n\n////Set the title and description value attributes in Note.\n","import React from \"react\";\nimport Note from \"./Note\";\n\nconst NotesList = (props) => {\n  const keepSearchMatches = (note) => note.doesMatchSearch === true;\n  const searchMatches = props.notes.filter(keepSearchMatches);\n  console.log(props);\n\n  const renderNote = (note) => (\n    <Note\n      removeNote={props.removeNote}\n      onType={props.onType}\n      note={note}\n      key={note.id}\n    />\n  );\n\n  const noteElements = searchMatches.map(renderNote);\n  return <ul className=\"notes-list\">{noteElements}</ul>;\n};\n\nexport default NotesList;\n","import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport NotesList from \"./components/NotesList\";\n\nclass App extends Component {\n  state = {\n    notes: [\n      {\n        id: Date.now(),\n        title: \"\",\n        description: \"\",\n        doesMatchSearch: true\n      }\n    ],\n    searchText: \"\"\n  };\n\n  addNote = () => {\n    //create a new note\n    const newNote = {\n      id: Date.now(),\n      title: \"\",\n      description: \"\",\n      doesMatchSearch: true\n    };\n    //add the new note to existing notes array in state\n    this.setState({ notes: [newNote, ...this.state.notes] });\n  };\n\n  onType = (editMeId, updatedField, updatedValue) => {\n    //editMeId = id of the note being edited\n    //updatedField = which field (title or description) is being edited?\n    //updatedValue = the updated value of the edited title or description\n    const updatedNotes = this.state.notes.map((note) => {\n      if (note.id !== editMeId) {\n        return note;\n      } else {\n        if (updatedField === \"title\") {\n          note.title = updatedValue;\n          return note;\n        } else {\n          note.description = updatedValue;\n          return note;\n        }\n      }\n    });\n    this.setState({ notes: updatedNotes });\n  };\n\n  onSearch = (text) => {\n    const newSearchText = text.toLowerCase();\n    const updatedNotes = this.state.notes.map((note) => {\n      if (!newSearchText) {\n        note.doesMatchSearch = true;\n        return note;\n      } else {\n        const title = note.title.toLowerCase();\n        const description = note.description.toLowerCase();\n        const titleMatch = title.includes(newSearchText);\n        const descriptionMatch = description.includes(newSearchText);\n        const hasMatch = titleMatch || descriptionMatch;\n        note.doesMatchSearch = hasMatch;\n        return note;\n      }\n    });\n    this.setState({\n      notes: updatedNotes,\n      searchText: newSearchText\n    });\n  };\n\n  removeNote = (noteId) => {\n    const updatedNotes = this.state.notes.filter((note) => note.id !== noteId);\n    this.setState({ notes: updatedNotes });\n  };\n\n  componentDidUpdate() {\n    const stringifiedNotes = JSON.stringify(this.state.notes);\n    localStorage.setItem(\"savedNotes\", stringifiedNotes);\n  }\n\n  componentDidMount() {\n    const stringifiedNotes = localStorage.getItem(\"savedNotes\");\n    if (stringifiedNotes) {\n      const savedNotes = JSON.parse(stringifiedNotes);\n      this.setState({ notes: savedNotes });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Header\n          onSearch={this.onSearch}\n          addNote={this.addNote}\n          searchText={this.state.searchText}\n        />\n        <NotesList\n          removeNote={this.removeNote}\n          notes={this.state.notes}\n          onType={this.onType}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\nimport \"./index.css\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}